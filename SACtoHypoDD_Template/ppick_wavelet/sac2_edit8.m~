clc; clear

%%log:
%EB 4/24/17
%added comments
%changed picker input to filt (y1b), from filtfilt (y1b_ff)
%changed most of the W1 references to be W1 from 2*W1
%changed frequency to rf (real frequency) and nf (nyquist frequency)
%added section to window +-2.5 around predicted arrival, and pick with
%envelpe
%
% next edit: add more here
%

addpath('./Matlab_TauP/');
javaaddpath('./taup/lib/log4j-1.2.8.jar');
javaaddpath('./taup/lib/seisFile-1.0.1.jar');
javaaddpath('./taup/lib/TauP-1.1.7.jar');

functime=tic;
%
% ccvec=[];
% acvec=[];
% counter=0;
%
% parameters

REM='/Users/class/Documents/GE165/ClassProject/xcorr_runs/myvmod.taup';
cf=[0.2 5]; %butterworth coefficients (in sec)
N=5; %padding for waveletpicker (need to check if this is ok on small series
n=2;
threshold=6;
Window1=5; %half width, sec?
window2before=1.25; %sec
window2after=3; %sec
eventoffset=10; %sec
stations=cell(21,1); %better data structure for this?
stations(1)={'TBCA'};
stations(2)={'TBCF'};
stations(3)={'TBHS'};
stations(4)={'TBHY'};
stations(5)={'TBMR'};
stations(6)={'TBTN'};
% stations(7)={'BOA'};
% stations(8)={'BOAB'};
% stations(9)={'ACON'};
% stations(10)={'BLUN'};
% stations(11)={'CNGN'};
% stations(12)={'CRIN'};
% stations(13)={'CSGN'};
% stations(14)={'ESPN'};
% stations(15)={'ESTN'};
% stations(16)={'HERN'};
% stations(17)={'MASN'};
% stations(18)={'MATN'};
% stations(19)={'MGAN'};
% stations(20)={'NANN'};
% stations(21)={'RCON'};


%read in events requested from IRIS with location and magnitude data.
c=containers.Map; %containers/dictionaries are by far the fastest way to do this referencing
eventlist=dlmread('events_OP.txt'); 
for i=1:length(eventlist)
    datevect=eventlist(i,1:6);
    c(datestr(datenum(double(datevect)),'yyyy mm dd HH MM SS'))=eventlist(i,:);
end

phasefile=fopen([char(stations(i)),'_stats.txt'],'w'); % record output data for statistical processing

maplist=cell(21,1);
%parpool(4)
for i=1:21 % could parrallelize most of this
    disp(num2str(i))
    dtfile=fopen([char(stations(i)),'_cc_output.txt'],'w'); %open files for writing to text
    ctfile=fopen([char(stations(i)),'_ppicks_output.txt'],'w');
    logfile=fopen([char(stations(i)),'_log.txt'],'w');

    fnames=dir(['/Users/class/Desktop/geo165/*',char(stations(i)),'*BHZ*.SAC']); % read in filenames for a station
    disp([string(length(fnames)), ' files for station ', char(stations(i))])
    
    d=containers.Map;
    datastore=cell(length(fnames),1);%read necessary signals for comparison, follows indexing of fnames
    stdstore=cell(length(fnames),1); %store standard deviations
    freq=cell(length(fnames),1); %store frequencies
    atstore=cell(length(fnames),1); %store window's absolute index
    %if length(fnames)>0; corrs=zeros(nchoosek(length(fnames),2),1); counter=0; end
    for j=1:length(fnames)
        data1=rsac([fnames(j).folder,'/',fnames(j).name]);
        %% Script body
        %x1=double(data1(:,1));
        nf=(1/data1(1,3))/2; %Nyquist frequency (sampling/2)
        rf=nf*2;
        W1=round(W*rf); % window width (# of samples)

        % detrend
        y1a=double(detrend(data1(:,2)));

        % filter
        [b,a]=butter(4,cf./nf,'bandpass');
        y1b=filter(b,a,y1a); %one phase filter
        y1b_ff=filtfilt(b,a,y1a); %two phase filter
        
        % read in Lat, long
        stala=data1(32,3);
        stalo=data1(33,3);
        
        % read in waveform/sacfile start time, check if it's in the event list
        yr=data1(71,3);
        [mo,dy]=jd2md(yr,data1(72,3));
        hr=data1(73,3);
        mn=data1(74,3);
        se=data1(75,3);
        ekey=datestr(datenum(double([yr mo dy hr mn se]))+eventoffset/84600,'yyyy mm dd HH MM SS');
        if ~isKey(c,ekey) %write out log of events not in event list c (should be 0)
            fprintf(logfile, [ekey, ' ', stations{i}]);
            continue;
        end
        
        % pull event info to local variables
        eveinfo=c(ekey);
        ela=eveinfo(7); 
        elo=eveinfo(8);
        edep=eveinfo(9);
        emag=eveinfo(10);
%         if emag<2.5
%             fprintf(logfile, [ekey, ' ', stations{i}]);
%             continue;
%         end
        dist = distance([stala stalo],[ela elo]);
        
        
        % calculate theorhetical travel times
        import edu.sc.seis.TauP.*
        
%         tauptime = Matlab_TauP('Time',REM,edep,'P',...
%             'sta',[stala stalo],...
%             'evt',[ela elo]);


        [~,taupout]=system(['/Users/class/Documents/GE165/ClassProject/xcorr_runs/TauP-2.4.3/bin/taup_time',...
            ' -mod ',REM,' -h ',num2str(edep),' -ph p,P -deg ',num2str(dist)]);

        if length(taupout)<300 %if text returned is too small, write to log
            fprintf(logfile, [ekey, ' ', stations{i}]);
            continue;
        end
        ttaup=str2num(taupout(295:300)); %extract travel time in seconds
        
        indext=round((ttaup+eventoffset)*rf); % travel time + event offset = predicted arrival at station
        
        if indext>=length(y1a) % log if arrival time is outside siesmogram length
            fprintf(logfile, [ekey, ' ', stations{i}]);
            continue;
        end
        
        if indext+W1>=length(y1a) % if the arrival is too close to the end of the sacfile, set the index to 1/2 window
            indext=length(y1a)-W1-1;
        end

        %
        %todo: add +-5s window (use 5=2*W1*freq), y_pick_in=abs(hilbert(y1b))
        
        % window around expected time
        pick_input=abs(hilbert(y1b(indext-W1:indext+W1)));
        
        % windowing
        index1=waveletpicker(pick_input,N,threshold); % use filt data, not filtfilt (1 vs 2 phase, arrival preservation)
        if index1<=1
            index1=index1+window2before+1;
        end

        if index1+window2after>=length(y1a)
            index1=index1-window2after-1;
        end
        
        y1c=y1b_ff(index1-window2before:index1+window2after);
        % taper
        hannw1=hann(length(y1c)); % Hanning tapering window
        y1d=hannw1.*y1c;
        datastore(j)={y1d}; % filtfilt, windowed data
        %stdstore(j)={std(y1d)}; % standard deviation of series
        atstore(j)={indext/(rf)}; % arrival time
        freq(j)={rf}; % frequency
        
        % Output P times
        Tevent=[data1(71,3),0,data1(72,3),data1(73,3),data1(74,3),data1(75,3)+eventoffset+data1(76,3)/1000]; % corrected event time [yr,m,d,h,min,sec]
        Tevent=datenum(double(Tevent)); % serial date number of event time
        Teventstr=datestr(Tevent,'yyyy mm dd HH MM SS');
        %Tarrival=Tevent+datenum(0,0,0,0,0,x1(index1)); % arrival time
        TT=index1/(rf)-eventoffset; % travel time minus the offset we used before the event
        TTTau=indext/(rf)-eventoffset;
        ttdiff=TTTau-TT;
        ttndiff=ttdiff/TTTau;
        
        weight=1;
        if TT<=0
            weight=0;
        end
        fprintf(ctfile,'%6s %3s %3f %3f %3f %3f %3f \r\n',Teventstr,stations{i},TT,TTTau,ttdiff,ttndiff,weight, rms(y1d));
        
        
        
        if isKey(c,Teventstr) %write out log of events not in event list (should be 0)
            d(Teventstr)=[stations{i},' ',num2str(ttaup),' ',num2str(weight)];
        else
            fprintf(logfile, [Teventstr, ' ', stations{i}]);
        end
            
    end
    maplist(i)={d}; %only output outside of loop
    
    sta_start=tic; %start timer
    for k=1:length(fnames)-1
        if isempty(datastore{k}); continue; end
        for m=k+1:length(fnames)
            if isempty(datastore{m}); continue; end
            %comp_start=tic;


            % xcorr  %we're interested in cross-covariance, rather than
            % cross correlation (don't care mean offsets since we're normalizing anyway)
            % see https://www.mathworks.com/matlabcentral/answers/23118-why-xcorr-coef-is-used-by-correlation-coefficients?s_tid=answers_rc1-1_p1_BOTH,
            % we want both unbiased (not changing with the number of points included) and normalized estimates
            
            [acorr,lag]=xcorr(datastore{k},datastore{m});
            autoco1 = xcorr(datastore{k},datastore{k});
            autoco2 = xcorr(datastore{m},datastore{m});
            normcorr = ifft(fft(acorr)./sqrt(abs(fft(autoco1)).*abs(fft(autoco2)))); %normalize,and remove the bias
            [~,I] = max(abs(normcorr));
            
            %counter=counter+1;
            %corrs(counter)=acorr(I);
            if max(abs(normcorr))<-1
                weight=0;
            else
                weight=max(abs(normcorr)); 
            end
            
            if isnan(weight)
                weight=0;
            end
            
            lagtime=lag(I)./(freq{m})+atstore{k}-atstore{m}; % should this be I?
            fprintf(dtfile,'%6s %6s %2f %2f\r\n',fnames(k).name,fnames(m).name,weight,lagtime);
            %toc(comp_start)
        end
    end
    %if length(fnames)>0; histogram(corrs); pause; end
    if length(fnames)>2
        average_time=toc(sta_start)/nchoosek(length(fnames),2)
    end
    
end

%create phase.dat for ph2dt
%
%pull event info from original events file, 
%check for event in each travel time hash table (stored in 21 element cell), 
%write travel time if found
phasefile=fopen('phase.dat','w');
for o=1:length(eventlist)  
    fprintf(phasefile, '# %.4d %.2d %.2d %.2d %.2d %.2d %4f %4f %2f %2f %2f %2f %2f %.3d \r\n', eventlist(o,:));
    eventID=datestr(datenum(double(eventlist(o,1:6))),'yyyy mm dd HH MM SS');
    for p=1:21
        if not(isempty(maplist{p}))
            e=maplist{p};
            if isKey(e,eventID)
                fprintf(phasefile, '%6s P\r\n', e(eventID));
            end
        end
    end
end

toc(functime)